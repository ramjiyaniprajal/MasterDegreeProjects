package Server;import java.io.EOFException;import java.io.File;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.net.ServerSocket;import java.net.Socket;import Client.CSMessage;import Client.Task;public class ComputeServer {	// Main method to start the server.	public static void main(String args[]) {		ServerSocket listenSocket = null;		try {			int serverPort = 6789; // server port			listenSocket = new ServerSocket(serverPort); // Creating server															// connection			// Constantly listening client requests.			while (true) {				Socket clientSocket = listenSocket.accept();				Connection1 connection = new Connection1(clientSocket);			}		} catch (IOException e) {			System.out.println("Listen socket:" + e.getMessage());		} finally {			if (listenSocket != null) {				try {					listenSocket.close();				} catch (IOException e) {					System.out.println("Error while closing connection");					e.printStackTrace();				}			}		}	}}// Connection class to perform some operation according to client's request.class Connection1 extends Thread {	ObjectInputStream in;	ObjectOutputStream out;	Socket clientSocket;	// Constructor to making connection with client and server.	public Connection1(Socket aClientSocket) {		try {			clientSocket = aClientSocket;			in = new ObjectInputStream(clientSocket.getInputStream());			out = new ObjectOutputStream(clientSocket.getOutputStream());			this.start();		} catch (IOException e) {			System.out.println("Connection:" + e.getMessage());		}	}	public void run() {		try {			// Reading serializable object received from client side.			Task task = (Task) in.readObject();			if (task instanceof CalculatePi) {				// Here, we are checking for class file in codebase directory as				// we are running this program on cmd , that may change when running on other				// environment like repo, eclipse.				File classFile = new File("Server//codebase//CalculatePi.class");				if (classFile.exists()) {					task.executeTask();					out.writeObject(task);				} else {					// Sending error message to client server.					CSMessage csmessage = new CSMessage();					System.out.println("The Compute task CalculatePi cannot be found!");					csmessage.setMessage("Upload the compute-task CalculatePi before calling the server!");					out.writeObject(csmessage);				}			} else if (task instanceof CalculatePrime) {				// Here, we are checking for class file in current directory as				// we are running this program on cmd , that may change when running on other				// environment like repo, eclipse.				File classFile = new File("Server//codebase//CalculatePrime.class");				if (classFile.exists()) {					task.executeTask();					out.writeObject(task);				} else {					// Sending error message to client server.					CSMessage csmessage = new CSMessage();					System.out.println("The Compute task CalculatePrime cannot be found!");					csmessage.setMessage("Upload the compute-task CalculatePrime before calling the server!");					out.writeObject(csmessage);				}			} else if (task instanceof CalculateGCD) {				// Here, we are checking for class file in current directory as				// we are running this program on cmd , that may change when running on other				// environment like repo, eclipse.				File classFile = new File("Server//codebase//CalculateGCD.class");				if (classFile.exists()) {					task.executeTask();					out.writeObject(task);				} else {					// Sending error message to client server.					CSMessage csmessage = new CSMessage();					System.out.println("The Compute task CalculateGCD cannot be found!");					csmessage.setMessage("Upload the compute-task CalculateGCD before calling the server!");					out.writeObject(csmessage);				}			} else {				// Sending error message if request is not supported by Server.				CSMessage csmessage = new CSMessage();				System.out.println("The Compute task cannot be found!");				csmessage.setMessage("Upload the compute-task before calling the server!");			}		} catch (EOFException e) {			System.out.println("EOF:" + e.getMessage());		} catch (IOException e) {			System.out.println("readline:" + e.getMessage());		} catch (ClassNotFoundException ex) {			ex.printStackTrace();		} finally {			try {				clientSocket.close();			} catch (IOException e) {/* close failed */			}		}	}}